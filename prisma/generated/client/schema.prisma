generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Contact {
  id                     String        @id @default(uuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  name                   String
  email                  String
  message                String        @db.Text
  phone                  String?       @db.VarChar(20)
  company                String?       @db.VarChar(100)
  clientType             String?       @db.VarChar(50)
  projectType            String?       @db.VarChar(50)
  budget                 Decimal?      @db.Decimal(10, 2)
  deadline               DateTime?
  existingSite           String?       @db.VarChar(255)
  status                 ContactStatus @default(NEW)
  annualRevenue          Decimal?      @db.Decimal(15, 2)
  assignedTo             String?       @db.VarChar(100)
  attachments            String?       @db.LongText
  companySize            String?       @db.VarChar(50)
  competitors            String?       @db.LongText
  contractValue          Decimal?      @db.Decimal(10, 2)
  industry               String?       @db.VarChar(100)
  ipAddress              String?       @db.VarChar(45)
  lastContact            DateTime?
  locale                 String?       @db.VarChar(10)
  marketingSource        String?       @db.VarChar(100)
  newsletter             Boolean       @default(false)
  nextFollowUp           DateTime?
  notes                  String?       @db.Text
  objectives             String?       @db.LongText
  position               String?       @db.VarChar(100)
  preferredContactMethod String?       @db.VarChar(50)
  priority               Priority      @default(NORMAL)
  projectScope           String?       @db.Text
  quotationAmount        Decimal?      @db.Decimal(10, 2)
  tags                   String?       @db.LongText
  targetAudience         String?       @db.Text
  timezone               String?       @db.VarChar(50)
  userAgent              String?       @db.Text
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.VarChar(255)
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(255)
  userId       String   @db.VarChar(255)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(100)
  email         String?   @unique @db.VarChar(100)
  emailVerified DateTime?
  image         String?   @db.Text
  accounts      Account[]
  sessions      Session[]
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
