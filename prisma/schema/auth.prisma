model User {
  id              String         @id @default(cuid())
  name            String?        @db.VarChar(100)
  email           String?        @unique @db.VarChar(100)
  emailVerified   DateTime?
  image           String?        @db.Text
  role            String         @default("USER")
  lastLogin       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  preferences     Json?
  accounts        Account[]
  sessions        Session[]
  contacts        Contact[]
  comments        Comment[]
  activities      ActivityLog[]
  notifications   Notification[]
  media           Media[]
  phases          Phase[]
  projects        UserOnProject[]
  managedProjects Project[]      @relation("ProjectManager")
  userActivities  Activity[]
  createdNotes    Note[]
  assignedTasks   Task[]         @relation("AssignedTasks")
  createdTasks    Task[]         @relation("CreatedTasks")
  communications  Communication[]
  uploadedDocuments Document[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(255)
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verification_tokens")
}