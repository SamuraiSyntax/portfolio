generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  EMAIL
  SYSTEM
  PUSH
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

// Models
model Contact {
  id                     String        @id @default(cuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  name                   String
  email                  String
  message                String        @db.Text
  phone                  String?       @db.VarChar(20)
  company                String?       @db.VarChar(100)
  clientType             String?       @db.VarChar(50)
  projectType            String?       @db.VarChar(50)
  budget                 Decimal?      @db.Decimal(10, 2)
  deadline               DateTime?
  existingSite           String?       @db.VarChar(255)
  status                 ContactStatus @default(NEW)
  annualRevenue         Decimal?      @db.Decimal(15, 2)
  assignedTo            User?         @relation(fields: [assignedUserId], references: [id])
  assignedUserId        String?
  attachments           Json?
  companySize           String?       @db.VarChar(50)
  competitors           Json?
  contractValue         Decimal?      @db.Decimal(10, 2)
  industry              String?       @db.VarChar(100)
  ipAddress             String?       @db.VarChar(45)
  lastContact           DateTime?
  locale                String?       @db.VarChar(10)
  marketingSource       String?       @db.VarChar(100)
  newsletter            Boolean       @default(false)
  nextFollowUp          DateTime?
  notes                 String?       @db.Text
  objectives            Json?
  position              String?       @db.VarChar(100)
  preferredContactMethod String?      @db.VarChar(50)
  priority              Priority      @default(NORMAL)
  projectScope          String?       @db.Text
  quotationAmount       Decimal?      @db.Decimal(10, 2)
  tags                  Json?
  targetAudience        String?       @db.Text
  timezone              String?       @db.VarChar(50)
  userAgent             String?       @db.Text
  comments              Comment[]
  activities            ActivityLog[] 

  @@map("contacts")
  @@index([email, createdAt])
}

model User {
  id            String         @id @default(cuid())
  name          String?       @db.VarChar(100)
  email         String?       @unique @db.VarChar(100)
  emailVerified DateTime?
  image         String?       @db.Text
  role          String        @default("USER")
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  preferences   Json?
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
  comments      Comment[]
  activities    ActivityLog[]
  notifications Notification[]
  media         Media[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(255)
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  metadata  Json?

  @@index([authorId])
  @@index([contactId])
  @@map("comments")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  entityType String
  entityId   String
  details    Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?  @db.Text
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  @@index([userId])
  @@index([entityType, entityId])
  @@index([contactId])
  @@map("activity_logs")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String          @db.Text
  type      NotificationType
  createdAt DateTime        @default(now())
  readAt    DateTime?
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  data      Json?

  @@index([userId])
  @@map("notifications")
}

model Media {
  id         String    @id @default(cuid())
  filename   String
  type       MediaType
  url        String
  size       Int?
  mimeType   String?   @db.VarChar(100)
  createdAt  DateTime  @default(now())
  uploadedBy User      @relation(fields: [userId], references: [id])
  userId     String
  metadata   Json?

  @@index([userId])
  @@map("media")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String?  @db.VarChar(50)

  @@map("system_settings")
}
