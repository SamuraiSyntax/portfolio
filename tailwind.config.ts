import typography from "@tailwindcss/typography";
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        ubuntu: ["var(--font-ubuntu)", "sans-serif"],
      },
      colors: {
        background: {
          DEFAULT: "hsl(var(--background))",
          50: "hsl(var(--background) / 0.05)",
          100: "hsl(var(--background) / 0.1)",
          200: "hsl(var(--background) / 0.2)",
          300: "hsl(var(--background) / 0.3)",
          400: "hsl(var(--background) / 0.4)",
          500: "hsl(var(--background) / 0.5)",
          600: "hsl(var(--background) / 0.6)",
          700: "hsl(var(--background) / 0.7)",
          800: "hsl(var(--background) / 0.8)",
          900: "hsl(var(--background) / 0.9)",
          950: "hsl(var(--background) / 0.95)",
        },
        foreground: {
          DEFAULT: "hsl(var(--foreground))",
          50: "hsl(var(--foreground) / 0.05)",
          100: "hsl(var(--foreground) / 0.1)",
          200: "hsl(var(--foreground) / 0.2)",
          300: "hsl(var(--foreground) / 0.3)",
          400: "hsl(var(--foreground) / 0.4)",
          500: "hsl(var(--foreground) / 0.5)",
          600: "hsl(var(--foreground) / 0.6)",
          700: "hsl(var(--foreground) / 0.7)",
          800: "hsl(var(--foreground) / 0.8)",
          900: "hsl(var(--foreground) / 0.9)",
          950: "hsl(var(--foreground) / 0.95)",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          50: "hsl(var(--primary) / 0.05)",
          100: "hsl(var(--primary) / 0.1)",
          200: "hsl(var(--primary) / 0.2)",
          300: "hsl(var(--primary) / 0.3)",
          400: "hsl(var(--primary) / 0.4)",
          500: "hsl(var(--primary) / 0.5)",
          600: "hsl(var(--primary) / 0.6)",
          700: "hsl(var(--primary) / 0.7)",
          800: "hsl(var(--primary) / 0.8)",
          900: "hsl(var(--primary) / 0.9)",
          950: "hsl(var(--primary) / 0.95)",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          50: "hsl(var(--secondary) / 0.05)",
          100: "hsl(var(--secondary) / 0.1)",
          200: "hsl(var(--secondary) / 0.2)",
          300: "hsl(var(--secondary) / 0.3)",
          400: "hsl(var(--secondary) / 0.4)",
          500: "hsl(var(--secondary) / 0.5)",
          600: "hsl(var(--secondary) / 0.6)",
          700: "hsl(var(--secondary) / 0.7)",
          800: "hsl(var(--secondary) / 0.8)",
          900: "hsl(var(--secondary) / 0.9)",
          950: "hsl(var(--secondary) / 0.95)",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          50: "hsl(var(--muted) / 0.05)",
          100: "hsl(var(--muted) / 0.1)",
          200: "hsl(var(--muted) / 0.2)",
          300: "hsl(var(--muted) / 0.3)",
          400: "hsl(var(--muted) / 0.4)",
          500: "hsl(var(--muted) / 0.5)",
          600: "hsl(var(--muted) / 0.6)",
          700: "hsl(var(--muted) / 0.7)",
          800: "hsl(var(--muted) / 0.8)",
          900: "hsl(var(--muted) / 0.9)",
          950: "hsl(var(--muted) / 0.95)",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          50: "hsl(var(--accent) / 0.05)",
          100: "hsl(var(--accent) / 0.1)",
          200: "hsl(var(--accent) / 0.2)",
          300: "hsl(var(--accent) / 0.3)",
          400: "hsl(var(--accent) / 0.4)",
          500: "hsl(var(--accent) / 0.5)",
          600: "hsl(var(--accent) / 0.6)",
          700: "hsl(var(--accent) / 0.7)",
          800: "hsl(var(--accent) / 0.8)",
          900: "hsl(var(--accent) / 0.9)",
          950: "hsl(var(--accent) / 0.95)",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          50: "hsl(var(--destructive) / 0.05)",
          100: "hsl(var(--destructive) / 0.1)",
          200: "hsl(var(--destructive) / 0.2)",
          300: "hsl(var(--destructive) / 0.3)",
          400: "hsl(var(--destructive) / 0.4)",
          500: "hsl(var(--destructive) / 0.5)",
          600: "hsl(var(--destructive) / 0.6)",
          700: "hsl(var(--destructive) / 0.7)",
          800: "hsl(var(--destructive) / 0.8)",
          900: "hsl(var(--destructive) / 0.9)",
          950: "hsl(var(--destructive) / 0.95)",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      sepia: {
        DEFAULT: ".75",
      },
    },
  },
  safelist: [
    // Theme
    "dark",
    "light",

    // Animations
    "loader",
    "backdrop-blur-animation",
    "backdrop-transition",
    "custom-cursor-external-link",

    // Background colors with utilities
    "bg-primary",
    "bg-secondary",
    "bg-muted",
    "bg-accent",
    "bg-background",
    "bg-foreground",
    "bg-destructive",
    ...Array.from({ length: 20 }, (_, i) => {
      const value = i === 0 ? 50 : i === 19 ? 950 : i * 50;
      return [
        `bg-primary-${value}`,
        `bg-secondary-${value}`,
        `bg-muted-${value}`,
        `bg-accent-${value}`,
        `bg-background-${value}`,
        `bg-foreground-${value}`,
        `bg-destructive-${value}`,
        `text-primary-${value}`,
        `text-secondary-${value}`,
        `text-muted-${value}`,
        `text-accent-${value}`,
        `text-background-${value}`,
        `text-foreground-${value}`,
        `text-destructive-${value}`,
      ];
    }).flat(),

    // Text colors with utilities
    "text-primary",
    "text-secondary",
    "text-muted",
    "text-accent",
    "text-background",
    "text-foreground",
    "text-destructive",
    ...Array.from({ length: 9 }, (_, i) => [
      `text-primary-${(i + 1) * 100}`,
      `text-secondary-${(i + 1) * 100}`,
      `text-muted-${(i + 1) * 100}`,
      `text-accent-${(i + 1) * 100}`,
      `text-background-${(i + 1) * 100}`,
      `text-foreground-${(i + 1) * 100}`,
      `text-destructive-${(i + 1) * 100}`,
    ]).flat(),

    // Border colors with utilities
    "border-primary",
    "border-secondary",
    "border-muted",
    "border-accent",
    "border-background",
    "border-foreground",
    "border-destructive",
    ...Array.from({ length: 9 }, (_, i) => [
      `border-primary-${(i + 1) * 100}`,
      `border-secondary-${(i + 1) * 100}`,
      `border-muted-${(i + 1) * 100}`,
      `border-accent-${(i + 1) * 100}`,
      `border-background-${(i + 1) * 100}`,
      `border-foreground-${(i + 1) * 100}`,
      `border-destructive-${(i + 1) * 100}`,
    ]).flat(),

    // Ring colors with utilities
    "ring-primary",
    "ring-secondary",
    "ring-muted",
    "ring-accent",
    "ring-background",
    "ring-foreground",
    "ring-destructive",
    ...Array.from({ length: 9 }, (_, i) => [
      `ring-primary-${(i + 1) * 100}`,
      `ring-secondary-${(i + 1) * 100}`,
      `ring-muted-${(i + 1) * 100}`,
      `ring-accent-${(i + 1) * 100}`,
      `ring-background-${(i + 1) * 100}`,
      `ring-foreground-${(i + 1) * 100}`,
      `ring-destructive-${(i + 1) * 100}`,
    ]).flat(),

    // Hover states
    ...Array.from({ length: 9 }, (_, i) => [
      `hover:bg-primary-${(i + 1) * 100}`,
      `hover:bg-secondary-${(i + 1) * 100}`,
      `hover:bg-muted-${(i + 1) * 100}`,
      `hover:bg-accent-${(i + 1) * 100}`,
      `hover:bg-background-${(i + 1) * 100}`,
      `hover:bg-foreground-${(i + 1) * 100}`,
      `hover:bg-destructive-${(i + 1) * 100}`,
      `hover:text-primary-${(i + 1) * 100}`,
      `hover:text-secondary-${(i + 1) * 100}`,
      `hover:text-muted-${(i + 1) * 100}`,
      `hover:text-accent-${(i + 1) * 100}`,
      `hover:text-background-${(i + 1) * 100}`,
      `hover:text-foreground-${(i + 1) * 100}`,
      `hover:text-destructive-${(i + 1) * 100}`,
    ]).flat(),

    // Focus states
    ...Array.from({ length: 9 }, (_, i) => [
      `focus:bg-primary-${(i + 1) * 100}`,
      `focus:bg-secondary-${(i + 1) * 100}`,
      `focus:bg-muted-${(i + 1) * 100}`,
      `focus:bg-accent-${(i + 1) * 100}`,
      `focus:bg-background-${(i + 1) * 100}`,
      `focus:bg-foreground-${(i + 1) * 100}`,
      `focus:bg-destructive-${(i + 1) * 100}`,
      `focus:text-primary-${(i + 1) * 100}`,
      `focus:text-secondary-${(i + 1) * 100}`,
      `focus:text-muted-${(i + 1) * 100}`,
      `focus:text-accent-${(i + 1) * 100}`,
      `focus:text-background-${(i + 1) * 100}`,
      `focus:text-foreground-${(i + 1) * 100}`,
      `focus:text-destructive-${(i + 1) * 100}`,
    ]).flat(),

    // Group hover states
    ...Array.from({ length: 9 }, (_, i) => [
      `group-hover:bg-primary-${(i + 1) * 100}`,
      `group-hover:bg-secondary-${(i + 1) * 100}`,
      `group-hover:bg-muted-${(i + 1) * 100}`,
      `group-hover:bg-accent-${(i + 1) * 100}`,
      `group-hover:bg-background-${(i + 1) * 100}`,
      `group-hover:bg-foreground-${(i + 1) * 100}`,
      `group-hover:bg-destructive-${(i + 1) * 100}`,
      `group-hover:text-primary-${(i + 1) * 100}`,
      `group-hover:text-secondary-${(i + 1) * 100}`,
      `group-hover:text-muted-${(i + 1) * 100}`,
      `group-hover:text-accent-${(i + 1) * 100}`,
      `group-hover:text-background-${(i + 1) * 100}`,
      `group-hover:text-foreground-${(i + 1) * 100}`,
      `group-hover:text-destructive-${(i + 1) * 100}`,
    ]).flat(),
  ],
  plugins: [typography, animate],
};
export default config;
